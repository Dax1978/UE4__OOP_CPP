////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Задание 3                                                                                                      //
// Изучить правила игры в Blackjack.                                                                              //
// Подумать, как написать данную игру на С++, используя объектно - ориентированное программирование.              //
//    Сколько будет классов в программе ?                                                                         //
//    Какие классы будут базовыми, а какие производными ?                                                         //
//    Продумать реализацию игры с помощью классов и записать результаты в виде комментария в основном файле       //
//       сдаваемой работы.                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <string>

// 1. ПРАВИЛА ИГРЫ "Blackjack"
// 
// 1.1. Цель игры:
// Собрать на руках такое сочетание карт, чтобы сумма очков была больше, чем на руках у раздающего карты, но не превосходила 21.
// Каждой карте соответствует определенное количество очков от 1 до 11, причем туз может означать и 1 и 11 
//  (в зависимости от того, какое значение дает преимущество).
// Карты до десятки "стоят" соответственно своему численному значению (двойка – 2, пятерка – 5 очков, etc.), 
//  а все "картинные" карты – по 10 очков.
// Масть для определения достоинства не имеет никакого значения.
//
// 1.2. Ставки:
// Прежде чем раздающий карты их раздаст, каждый игрок должен сделать ставку.
//
// 1.3. Раздача карт:
// После того как все игроки сделали ставки, раздающий (dealer) должен раздать карты. Начиная с первого игрока, раздающий карты (dealer)
//  дает каждому игроку по одной карте лицом кверху так, что раздающему достается последняя карта.
// Затем процесс повторяется с единственным отличием – раздающий карты (dealer) кладет свою карту лицом вниз.
//  Перевернутая карта раздающего называется скрытой картой (hole card).
// Раздача заканчивается, когда каждому игроку (включая раздающего карты) роздано по две карты. После завершения раздачи начинается игра.
//
// 1.4. Игра:
// Ход игры зависит от открытой карты раздающего (dealer). Если открытая карта раздающего – десятка (приносит 10 очков) или туз (11 очков),
// раздающий карты должен проверить свою скрытую карту и если обе карты дают ему в сумме 21 очко (такая сумма называется естественной или 
// Блэк джек [Blackjack]), игра автоматически оканчивается и играющие переходят к расчету. Если же скрытая карта не приносит 21 очко, 
// игра продолжается дальше в обычном порядке.
// В случае, когда открытая карта раздающего — не десятка и не туз, в игру вступает следующий игрок. Если у него 21 очко, то есть 
// Блэк джек (Blackjack), игра переходит к следующему игроку. Если же у игрока сумма очков меньше 21, возможны два варианта: 
//    1) взять еще карту
//    2) остановиться.
// 1.4.1. Взять еще (hit)
//    — если игрок не доволен картами, которые у него на руках, он может взять еще карту. Игрок может брать карты до тех пор, пока: 
//      1) не наберет больше, чем 21 очко (перебор, то есть проигрыш, банкротство, разорение)
//      2) не остановится.
// 1.4.2. . Остановка (stand)
//    — если игрок доволен картами на руках, он может остановиться и не брать дополнительных карт.
// После того как игрок обанкротится или остановится, игра переходит к следующему игроку. Этот процесс повторяется до тех пор, пока не сыграют все игроки. 
// Когда сыграют все игроки, раздающий карты разыгрывает имеющиеся у него карты на руках. После того как сыграет раздающий карты, играющие
// переходят к подсчету очков и выплате выигрышей.
//
// 1.5. Расчет:
// После того как сыграет раздающий карты (или когда у него Блэк джек [Blackjack]), игроки рассчитываются. 
// Игроки, которые обанкротились (набрали больше чем 21 очко – перебор), теряют свои ставки.
// Игроки, у которых на руках такие карты, что очков меньше, чем у раздающего карты, также теряют свои ставки.
// Только игроки, набравшие очков больше, чем раздающий карты, выигрывают суммы, равные своим ставкам.
// Наконец, считается, что игроки, набравшие столько же очков, сколько и раздающий карты, сыграли "вничью" и в дележе выигрыша участия не принимают.
// Таким образом, игрокам, сыгравшим "вничью", никаких выплат не производится.
// После этого ставки делятся поровну между участниками дележа.
// Если у игрока комбинация Блэк джек (Blackjack), а у раздающего карты – нет, то игроку выплачивается выигрыш в размере три вторых его ставки.
// Например, если ставка составляет 100 рублей, то выплачивается 150 рублей (100 * 3 / 2).
//
// 1.6. Дополнительные сведения:
// Колода – Блэк джек (Blackjack) играется четырьмя стандартными колодами по 52 карты. Эти четыре колоды складываются в одну большую стопку карт.
// Количество игроков – в Блэк джек (Blackjack) могут играть от одного до семи игроков.
// Удваивание ставок – после того как игрок получил две карты, он может удвоить ставку. Если игрок принял такое решение, он удваивает свою ставку, 
//  получает еще одну карту и заканчивает свой ход.
// Страховка – если первая (открытая) карта раздающего карты – туз, игрок может сделать страховую ставку. Величина страховой ставки равна половине 
//  первоначальной ставки. Если скрытая карта раздающего приносит ему 21 очко, игрок остается при своих (т.е.заканчивает игру без прибыли и убытка).
//  Если же скрытая карта не приносит раздающему 21 очко, игрок теряет страховую ставку.
// Разбиение пары – говорят, что игрок имеет пару, если после раздачи две начальные карты имеют одинаковое достоинство (например две десятки).
//  Если игрок имеет пару, то он может разделить карты на руках на две новые руки. Если игрок разбивает пару, раздающий карты раздает по одной дополнительной 
//  карте в каждую руку, а игрок должен сделать еще одну ставку, равную начальной, на дополнительную руку. Игрок может разбивать пары (кроме пары из двух тузов), 
//  которые образовались в результате предыдущего разбиения пар. Заметим также, что 21 очко на одной из рук, появившихся в результате разбиения пар, 
//  не рассматривается как Блэк джек (Blackjack). После разбиения пары игрок может по очереди для каждой руки брать еще карты или останавливаться.

// РЕАЛИЗАЦИЯ
// Предполагаю минимум 7 классов:
//      1. BlackjackGame (игра Блэк джек [Blackjack])
//          1.1. Создает игроков
//          1.2. Создает карты на руках
//          1.3. Создает раздающего
//          1.4. Создает стопку карт
//          1.5. Ведет игру
//          1.6. Подсчитывает выигрыши и проигрыши
//      2. Dealer (раздающий карты) - наследуется от Player
//          2.1. Передает ход игроку или себе
//          2.2. Отслеживает игроков
//          2.3. Начинает новую игру
//          2.4. Сдает карты
//          2.5. Решает брать еще или остановиться
//          2.6. Сообщает игрокам, когда они могут играть
//      3. Player (игрок)
//          3.1. Хранит карты на руках
//          3.2. К картам на руках, добавляет новые
//          3.3. Принимает решение брать еще или остановиться
//          3.4. Сообщает раздающему: игру завершил
//          3.5. Обновляет наблюдателей
//          3.6. Отображает себя
//          3.7. Обнаруживает обанкротившиеся карты на руках
//          3.8. Ведет свой кошелек
//      4. Card (карта)
//          4.1. Хранит масть
//          4.2. Хранит ранг
//          4.3. Отображает себя
//          4.4. Хранит и переключает состояние: лицом вверх или вниз
//          4.5. Хранит свой номинал
//      5. Deck (колода карт)
//          5.1. Строит 52 карты
//          5.2. Возвращает колоду из 52 карт
//      6. DeckPile (стопка карт)
//          6.1. Принимает 4 колоды карт на хранение
//          6.2. Тасует карты
//          6.3. Сдает карты
//          6.4. Собирает карты
//          6.5. Устанавливает себя в начальное положение
//      7. Hand (карты на руках)
//          7.1. Хранит карты
//          7.2. Добавляет карты себе
//          7.3. Устанавливает себя в начальное положение
//          7.4. Переворачивает все карты
//          7.5. Отображает себя
//          7.6. Вычисляет свою сумму очков
//          7.7. Обнаруживает разорение
//

class Card
{
// Trump (Козырь)
// Diamonds (Бубы / Алмазы)
// Hearts (Черви / Сердца)
// Clubs (Трефы / Клубы)
// Spades (Пики / Лопаты)

// Ace (Туз)
// Jack (Валет / Джек)
// Queen (Дама / Королева(
// King (Король)
// Joker (Джокер)
// Остальные карты, с двойки по десятку, называются просто цифрой.
private:    
    std::string rank;
    std::string suit; // D or H or C or S
    bool face;
    int num;

public:
    Card(std::string rank, std::string suit, bool face, int num)
        : rank(rank), suit(suit), face(face), num(num)
    {}

    void faceUp() { face = true; }
    void faceDown() { face = false; }

    std::string getCard() {
        std::string str;
        if (face)
        {
            if (rank.length() == 1) { str = "_" + rank; }
            else { str = rank; }
            str += suit;
        }
        else { str = "???"; }
        return str;
    }

    void viewCard() { 
        std::string str;
        if (face)
        {
            if (rank.length() == 1) { str = "_" + rank; }
            else { str = rank; }
            str += suit;
        }
        else { str = "???"; }
        std::cout << str; 
    }
};

class Deck
{
private:
    std::string ranks[13] = { "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A" };
    std::string suits[4] = { "D", "H", "C", "S" };
    Card *deck = (Card*)operator new(sizeof(Card) * 52);

public:
    Deck()
    {
        int num;
        size_t i = 0;
        for (size_t r = 0; r < 13; r++)
        {
            for (size_t s = 0; s < 4; s++)
            {
                // stoi => int
                // stof => float
                // stod => double
                if (r < 9) { num = std::stoi(ranks[r]); };
                if ((r > 9) && (r < 12)) { num = 10; };
                if (r == 12) { num = 11; };
                new(&deck[i]) Card(ranks[r], suits[s], false, num);
                // deck[i] = Card(ranks[r], suits[s], false, num);
                i++;
            }
        }
    }

    void printDeck()
    {
        for (size_t i = 0; i < 52; i++)
        {
            deck[i].faceUp();
            deck[i].viewCard();
            std::cout << " , ";
            deck[i].faceDown();
        }
    }

    Card *getDeck() { return deck; }
};


int main()
{
    setlocale(LC_ALL, "Russian");

    // Card card_JD("J", "D", false, 10);
    // card_JD.viewCard();
    Deck deck;
    // deck.printDeck();

    Card* d = deck.getDeck();
    // deck.printDeck();
    for (size_t i = 0; i < 52; i++)
    {
        d[i].faceUp();
        std::cout << d[i].getCard() << " ";
        d[i].faceDown();
    }

    return 0;
}
